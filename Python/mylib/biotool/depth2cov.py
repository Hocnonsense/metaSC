# -*- coding: utf-8 -*-
"""
    @Date: 2020-09-13 13:51:35
 * @LastEditors: Hwrn
 * @LastEditTime: 2020-10-03 13:07:13
 * @FilePath: /MyScripts/Python/mylib/biotool/depth2cov.py
    @Description:
"""

from sys import argv, stdout


def write_table(file, table, rows, separator="\t", end="\n"):
    """ write table[rows] to file, table is an 1-D array
        @param file: file to read in
        @param table: 被写入文件的 table, 将写入其中的每一行
        @param rows: 指定写入文件的 table 的列
    """
    write_table = [table[i] for i in rows]
    file.write(separator.join(write_table) + end)


_help = """
    Useage: python depth2cov.py -depth scaffold.depth [-bin bin -out outfile]
        -depth: the depth file generated by `jgi_summarize_bam_contig_depths`

        -bin: bin file created by CONCOCT, MetaBAT, maxbin etc.
        -out: output file

        any question, email: Hwrn.aou@sjtu.edu.cn
    """


if len(argv) == 1:  # no depth file, just show help
    print(_help)
    raise Exception("No scaffold.depth given!")


# if len(argv) > 1; there must be a depth file
# input namespace
in_name = ""
bin_name = ""
out_name = ""

# argv input
i = 1
while i < len(argv):
    if argv[i][0] == "-":  # key
        key = argv[i]
        if key == "-depth":
            in_name = argv[i + 1]
        elif key == "-bin":
            bin_name = argv[i + 1]
        elif key == "-out":
            out_name = argv[i + 1]
        i += 2

    else:  # what will happen then?
        if not in_name:
            in_name = argv[i]
        elif not bin_name:
            bin_name = argv[i]
        elif not out_name:
            out_name = argv[i]
        i += 1

# argv deal
if not in_name:
    print(_help)
    raise Exception("No scaffold.depth given!")

bin_list = {}
if bin_name:
    bin_name = argv[2]

    with open(bin_name) as bin_file:
        line = bin_file.readline()
        while line:
            if line[0] == ">":
                bin_list[line[1:-1]] = ""
            line = bin_file.readline()

if not out_name:
    out_name = in_name + "._cov"
    if bin_name:
        out_name = bin_name + "-" + out_name

with open(in_name) as in_file, \
        open(out_name, "w") as out_file:
    rows = [0, 2]  # output like contigName"\t"totalAvgDepth
    title = in_file.readline().split("\t")
    # someone think "totalAvgDepth" not in rows[2], make them happy
    for i, name in enumerate(title):
        if len(name) > 13 and name[-13:] == "totalAvgDepth":
            rows[1] = i
    write_table(out_file, title, rows)
    line = in_file.readline()
    while line:
        value = line.split("\t")
        if not bin_list or value[0] in bin_list:
            write_table(out_file, value, rows)
        line = in_file.readline()

stdout.write("done!")
