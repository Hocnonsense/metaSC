# -*- coding: utf-8 -*-
"""
 * @Date: 2020-10-24 10:24:10
 * @LastEditors: Hwrn
 * @LastEditTime: 2020-12-05 19:56:03
 * @FilePath: /HScripts/Python/seqPipe/x03_prodigal_cut.py
 * @Description:
    x03_prodigal_cut.py <in_file_prefix_prefix> <out_file_prefix_prefix> <threshold> [-h] [--help]
        @description:   Remove sequence shorter than given threshold.
                        This file is designed to control quality of
                        prodigal.faa, prodigal.fna, prodigal.gff generated by
                        prodigal.
        @param:         <in_file_prefix_prefix>:   input file prefix. For example,
                                        if in_file_prefix_prefix is "./M001-prodigal",
                                        then will read these three files:
                                                ./M001-prodigal.faa
                                                ./M001-prodigal.fna
                                                ./M001-prodigal.gff
                        <out_file_prefix_prefix>:  output file prefix. Similar to
                                            <in_file_prefix_prefix>
                        <threshold>:        threshold for aa, typtically, 33
                                            Any sequence in in_file_prefix_prefix.faa
                                            but < threshold will be discard.
                                            Simialr, those in
                                            in_file_prefix_prefix.fna but < threshold
                                            times 3 will be discard.
"""

from io import FileIO
import os
from sys import argv, stderr
from typing import Tuple
from Bio import SeqIO


def parse_args():
    if "-h" in argv or "--help" in argv or len(argv) == 1:
        print(__doc__, file=stderr)
        exit(0)

    sc, in_file_prefix, out_file_prefix, number = argv
    in_file_prefix = os.path.abspath(os.path.expanduser(in_file_prefix))
    out_file_prefix = os.path.abspath(os.path.expanduser(out_file_prefix))
    num = int(number)
    args = in_file_prefix, out_file_prefix, num
    print(sc, *args, sep="\n" + " "*4, file=stderr)
    return args


def check_args(args):
    in_file_prefix, out_file_prefix, num = args
    c_args = []
    suffix = ".faa"
    in_file = in_file_prefix + suffix
    if os.path.exists(in_file) and os.path.isfile(in_file):
        c_args.append((in_file, out_file_prefix + suffix, num, trim_fa))
    else:
        print("invalid", suffix, "file:", in_file, file=stderr)
    suffix = ".fna"
    in_file = in_file_prefix + suffix
    if os.path.exists(in_file) and os.path.isfile(in_file):
        c_args.append((in_file, out_file_prefix + suffix, num * 3, trim_fa))
    else:
        print("invalid", suffix, "file:", in_file, file=stderr)
    suffix = ".gff"
    in_file = in_file_prefix + suffix
    if os.path.exists(in_file) and os.path.isfile(in_file):
        c_args.append((in_file, out_file_prefix + suffix, num * 3, trim_gff))
    else:
        print("invalid", suffix, "file:", in_file, file=stderr)

    if c_args:
        return c_args

    print("No valid inputs. Exit")
    exit(1)


def trim_fa(in_file: FileIO, out_file: FileIO, num: int) -> Tuple[int, int]:
    discard_seqs, discard_bases = (0, 0)
    head = ">gene_id"
    seq = ""
    for line in in_file:
        if line.startswith("#"):
            continue
        elif line.startswith(">"):
            seq_len = sum([len(i) for i in seq.split()])
            if seq_len > num:
                out_file.write(head+seq)
            else:
                discard_seqs += 1
                discard_bases += seq_len
            head = line
            seq = ""
        else:
            seq += line
    return (discard_seqs, discard_bases)


def trim_gff(in_file: FileIO, out_file: FileIO, num: int) -> Tuple[int, int]:
    discard_seqs, discard_bases = (0, 0)
    for line in in_file:
        if line.startswith("#"):
            continue
        else:
            values = line.strip().split()
            if values[2] != "CDS":
                print("Not CDS:\n>", line, file=stderr)
                discard_seqs += 1
            else:
                seq_len = int(values[4]) -  int(values[3]) + 1
                #assert seq_len % 3 == 0
                if seq_len > num:
                    out_file.write(line)
                else:
                    discard_seqs += 1
                    discard_bases += seq_len
    return (discard_seqs, discard_bases)


def main():
    c_args = check_args(parse_args())

    for (in_file, out_file, num, func) in c_args:
        with open(out_file, "w") as fo \
                , open(in_file) as fi \
                :
            discard_seqs, discard_bases = func(fi, fo, num)
        print("    {seqs_n} seqs ({bases_n} bases(aa)) are discarded".format(
            seqs_n=discard_seqs, bases_n=discard_bases), file=stderr)


if __name__ == "__main__":
    main()
