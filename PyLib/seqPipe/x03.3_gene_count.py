# -*- coding: utf-8 -*-
"""
 * @Editor: LYX
 * @LastEditors: Hwrn
 * @LastEditTime: 2020-12-31 21:06:02
 * @FilePath: /HScripts/Python/seqPipe/x03.3_gene_count.py
 * @Description:
        update from LYX's script

    useage: x03.3_gene_count.py <in_file> [-o out_file]

    description: read file generated by featureCounts, and calculate TPM
        (Transcript Per Million)
    args:
        <in_file>: file generated by featureCounts
            featureCounts \\
                -a ${gff} \\
                -o <in_file> \\
                -t CDS -g ID \\
                -p ${bam}
        <out_file>: output file format like:
            gene_name\ttpm
"""


from io import StringIO
from sys import argv, stderr, stdout
from typing import Dict


def read_featureCounts(text: StringIO) -> list:
    """ read infile of featureCounts by:
            featureCounts \\
                -a ${gff} \\
                -o <in_file> \\
                -t CDS -g ID \\
                -p ${bam}
       @return:
           |   0   | 1  |  2   | 3  |   4   |   5   | 6 |
            Geneid, Chr, Start, End, Strand, Length, bam
    """
    countlist = []
    for line in text:
        if line.startswith("#"):
            continue
        if line.startswith("Geneid"):  # drop title line
            continue
        Geneid, Chr, Start, End, Strand, Length, bam = line.strip().split()
        countlist.append([
            Geneid, Chr, int(Start), int(End),
            Strand, int(Length), int(bam)
        ])
    return countlist


def gene_count(countlist: dict) -> dict:
    """
       @param {countlist: list}
            list read in by {callable: read_featureCounts}
       @return {ctg_g_tpm: dict} -> {
            contigName: {geneId: tpm}
        }
    """
    ctg_g_tpm: Dict[str, dict] = {}

    # total transcript = sum(Length / depth)
    transcripts = [values[6] / values[5] for values in countlist]
    total_transcript = sum(transcripts)

    for values, transcript in zip(countlist, transcripts):
        geneId = int(values[0].split('_')[1])
        tpm = transcript / total_transcript * 1000000
        ctg_g_tpm.setdefault(values[1], {})[geneId] = tpm

    return ctg_g_tpm


def main(in_file, out_file=None):
    countlist = []
    with open(in_file) as fi:
        countlist = read_featureCounts(fi)
    ctg_g_tpm = gene_count(countlist)

    # output
    fo = open(out_file, "w") if out_file else stdout
    for contigName, genes in ctg_g_tpm.items():
        for geneId, tpm in genes.items():
            geneName = contigName + "_" + str(geneId)
            print(geneName, tpm, sep="\t", file=fo)

    if out_file:
        fo.close()


def parse_args(args: list) -> list:
    out_file = None
    if "-h" in args:
        raise IndexError
    if "-o" in args:
        index_o = args.index("-o")
        args.pop(index_o)
        out_file = args.pop(index_o)
    in_file = args[0]

    return(in_file, out_file)


if __name__ == "__main__":
    try:
        in_file, out_file = parse_args(argv[1:])
    except IndexError:
        print(__doc__, file=stderr)
        exit(1)
    main(in_file, out_file)
