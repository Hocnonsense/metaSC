# -*- coding: utf-8 -*-
"""
 * @Date: 2021-03-15 11:07:29
 * @LastEditors: Hwrn
 * @LastEditTime: 2022-02-18 10:28:44
 * @FilePath: /metaSC/PyLib/PyLibTool/file_info.py
 * @Description:
    Extract information in __doc__
"""

import logging
from typing import Dict


def extract_doc(module_doc: str) -> Dict:
    """
    Extract header generated by 'korofildheader'

    >>> import PyLib.PyLibTool.file_info
    >>> from PyLib.PyLibTool.file_info import extract_doc
    >>> extract_doc(PyLib.PyLibTool.file_info.__doc__)["FilePath"]
    ' /metaSC/PyLib/PyLibTool/file_info.py'
    >>> extract_doc(PyLib.PyLibTool.file_info.__doc__)["Description"]
    '\n    Extract information in __doc__'
    """
    doc_list = module_doc.split(" * @")
    doc_dict: Dict = {}
    k = "description"
    for item in doc_list:
        item_ = item.strip().split(":", 1)
        if item_ == [""]:
            continue
        elif len(item_) == 1:
            doc_dict[k] += " * @ " + item_[0]  # undefined action
        elif len(item) == 2:
            k, v = item_
            doc_dict[k] = v

    return doc_dict


def verbose_import(module_name, module_doc) -> logging.Logger:
    """ """
    doc_dict = extract_doc(module_doc)
    logger = logging.getLogger(module_name)
    LastEditTime = doc_dict.get("LastEditTime", "")
    logger.debug(f"import version {LastEditTime} -- {module_name}")
    return logger


def basicConfig(logger_level: str = None, _logger_level=["INFO"]):
    """This function is used in funtion called by joblib.delayed"""
    if logger_level:
        _logger_level[0] = logger_level.upper()
    logger_level = _logger_level[0]
    logging.basicConfig(level=logger_level)
    return logger_level


verbose_import(__name__, __doc__)
