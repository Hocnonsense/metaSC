import pandas as pd
from _typeshed import Incomplete as Incomplete
from collections.abc import Generator
from pathlib import Path
from typing import Union

logger: Incomplete

def drop_gene(gene: str, subsets: tuple[Union[set, list, dict], bool]) -> bool: ...

class gene2KO:
    class gene_ko_iter:
        filename: Incomplete
        def __init__(self, filename: Path) -> None: ...
        def __call__(self) -> None: ...
    class ghost(gene_ko_iter):
        def __call__(self) -> Generator[Incomplete, None, None]: ...
    class kofam(gene_ko_iter):
        def __call__(self) -> Generator[Incomplete, None, None]: ...
    class eggnog(gene_ko_iter):
        def __call__(self) -> Generator[Incomplete, None, None]: ...
    class mantis(gene_ko_iter):
        KO_PATTERN: Incomplete
        def __call__(self) -> Generator[Incomplete, None, None]: ...
    annoters: Incomplete
    def get_gene_KOs(self, annoters: Incomplete | None = ...): ...
    def get_gene_ko(self) -> None: ...
    ann_files: Incomplete
    def __init__(self, pattern) -> None: ...

def load_gene_abd(gene_count, method: str = ..., melt: bool = ..., threshold_0: float = ...) -> pd.DataFrame: ...
def load_rep2all(all_100_: Path, all_clu_: Path): ...
def get_all_gene_ko(gene_ko: pd.Series, rep2all: pd.DataFrame): ...
def main(annot_prefix: Path, all_100_path: Path, all_clu_path: Path, all_gene_ko_path: Path): ...
def run(loglevel: str, all_100: Path, all_clu: Path, annot_prefix: Path, gene_annots: Path): ...
