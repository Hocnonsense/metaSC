import argparse
from PyLib.seqPipe.collect_gene_ko import gene2KO as gene2KO
from _typeshed import Incomplete as Incomplete
from typing import Dict, List, Set, TextIO, Tuple, Union

logger: Incomplete

def drop_gene(gene: str, subsets: Tuple[Union[Set, List, Dict], bool]) -> bool: ...
def get_gene_RPb(countfile, subsets) -> Tuple[List[str], Dict[str, List[float]]]: ...
def main(subsets: Tuple[Union[Set, List, Dict], bool], gene2ko: gene2KO, countfile: str, show_contig: bool, output: TextIO): ...
def get_subset(raw_subset: List[str], threshold: int): ...
def get_args() -> Tuple[Tuple[Set, bool], gene2KO, str, bool, TextIO]: ...
def set_args(parser: argparse.ArgumentParser): ...
def run() -> None: ...
