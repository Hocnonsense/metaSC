from .common import PathLike as PathLike, Pattern as Pattern, Unformattable as Unformattable
from _typeshed import Incomplete as Incomplete
from typing import Iterable, Optional, overload

class PathUnformattable(Unformattable): ...

class PathPattern(Pattern):
    default_constrains: Incomplete
    def __init__(self, pattern, _type: Incomplete | None = ..., default_constrains: str = ...) -> None: ...
    def check_pattern(self) -> None: ...
    @property
    def names(self) -> None: ...
    @property
    def constraints(self) -> None: ...
    def replace_constraint(self, constraints: dict[str, Optional[str]]): ...
    @property
    def strip_constraints(self) -> None: ...
    @property
    def regex(self) -> None: ...
    def glob(self, paths: Iterable[PathLike]): ...
    @overload
    def glob_path(self, paths: Iterable): ...
    @overload
    def glob_path(self, *, followlinks: bool = ...) -> None: ...
    @overload
    def glob_path(self, *, restriction: Incomplete | None = ..., omit_value: Incomplete | None = ...) -> None: ...
