from _typeshed import Incomplete
from contextlib import ContextDecorator
from typing import Any

MAX_LINE_LENGTH: int

class Func(ContextDecorator):
    name: Incomplete
    log: str
    index: Incomplete
    no_exception: bool
    start: int
    def __init__(self, name: Incomplete | None = ..., index: int = ..., **kwargs: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Incomplete | None = ..., exc_val: Incomplete | None = ..., exc_tb: Incomplete | None = ...): ...
    @property
    def time(self): ...
    def exit(self, name, equal: str = ..., warning: str = ...) -> None: ...
    def open_log(self, name: Incomplete | None = ...): ...
    @staticmethod
    def set_line_length(length: int = ...): ...

class _Logger:
    path: Incomplete
    terminal: Incomplete
    def __init__(self, path: str = ...) -> None: ...
    def write(self, message) -> None: ...
    def flush(self) -> None: ...
    def index(self, index: Incomplete | None = ...): ...
    def write_terminal(self, message) -> None: ...
    def open(self, filename): ...
    def close(self, filename) -> None: ...
