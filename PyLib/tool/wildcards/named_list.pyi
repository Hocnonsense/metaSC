from _typeshed import Incomplete
from collections.abc import Generator
from typing import Any, Callable, Optional

class NamedList(list):
    def __init__(self, toclone: Optional['NamedList'] = ..., fromdict: Optional[dict[str, Any]] = ..., custom_map: Callable = ...) -> None: ...
    def items(self) -> Generator[Incomplete, None, None]: ...
    def keys(self): ...
    def get(self, key, default_value: Incomplete | None = ...): ...
    def __getitem__(self, key): ...
    def __hash__(self): ...
