import string
from .common import Pattern as Pattern, Unformattable as Unformattable, extract_args_kwargs as extract_args_kwargs, flatten as flatten, stepout as stepout
from _typeshed import Incomplete
from typing import Any, Union

class SequenceFormatter(string.Formatter):
    separator: Incomplete
    element_formatter: Incomplete
    def __init__(self, separator: str = ..., element_formatter=..., *args, **kwargs) -> None: ...
    def format_element(self, elem, format_spec): ...
    def format_field(self, value, format_spec): ...

class QuotedFormatter(string.Formatter):
    quote_func: Incomplete
    def __init__(self, quote_func=..., *args, **kwargs) -> None: ...
    def format_field(self, value, format_spec): ...

class AlwaysQuotedFormatter(QuotedFormatter):
    def format_field(self, value, format_spec: str): ...

always_qfmt: Incomplete
qfmt: Incomplete
nfmt: Incomplete

class GetKeyFormatter(string.Formatter):
    class T:
        def __getattribute__(self, __name: str) -> Any: ...
        def __getitem__(self, __name: str) -> Any: ...
    names: Incomplete
    args: Incomplete
    def __init__(self) -> None: ...
    def get_value(self, key, args, kwargs): ...
    @classmethod
    def get_names(cls, _pattern: str): ...

class StrPattern(Pattern):
    def __init__(self, pattern, _type: Incomplete | None = ...) -> None: ...
    @property
    def names(self) -> list[str]: ...
    def select_kwargs(self, keep_missing: bool = ..., fill_missing: bool = ..., missing_value: Incomplete | None = ...): ...
    def formatter(self, quote_all: Union[None, bool, string.Formatter] = ...): ...
    def xformat(self, nstep: int = ..., keep_missing: bool = ..., fill_missing: bool = ..., missing_value: Incomplete | None = ..., quote_all: Union[None, bool, string.Formatter] = ...): ...
    def xexpand(self, keep_missing: bool = ..., fill_missing: bool = ..., missing_value: Incomplete | None = ..., combinator=...): ...
