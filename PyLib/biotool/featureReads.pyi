import pysam
from Bio import SeqFeature as SeqFeature
from PyLib.PyLibTool.file_info import verbose_import as verbose_import
from _typeshed import Incomplete
from typing import Dict, Iterable, Iterator, List, Optional, Set, Tuple

logger: Incomplete

def extract_exons(seq: SeqFeature.SeqFeature) -> List[SeqFeature.SeqFeature]: ...
def line_exons(exons: List[SeqFeature.SeqFeature]): ...
def find_exons_left(locat: int, locats: List[int], index: Optional[Tuple[int, int]] = ...) -> Optional[int]: ...
def exon_iter(locat: int, locats: List[int], exon_loc: Dict[int, List[SeqFeature.SeqFeature]]) -> Iterable[SeqFeature.SeqFeature]: ...
def filter_OmicsPrj1(read: pysam.AlignedSegment) -> Iterator[pysam.AlignedSegment]: ...
def filter_cmseq(read: pysam.AlignedSegment, minlen: int = ..., minqual: int = ..., maxsnps: float = ..., exclude_seqs: Optional[Iterable[str]] = ...) -> Iterator[pysam.AlignedSegment]: ...
def load_bam_2_memory(filename: str) -> Dict[str, pysam.AlignedSegment]: ...
def read_junc(read: pysam.AlignedSegment) -> Tuple[int, int]: ...
def map_read_exon(uniq_bamis: Dict[str, pysam.AlignedSegment], locats: List[int], exon_loc: Dict[int, List[SeqFeature.SeqFeature]], anno_method: str) -> Tuple[Dict[SeqFeature.SeqFeature, List[pysam.AlignedSegment]], Dict[Tuple[SeqFeature.SeqFeature, SeqFeature.SeqFeature], List[pysam.AlignedSegment]], Set]: ...
def analyze(gff, bam, fo=...) -> None: ...
