from Bio import Entrez
from PyLib.PyLibTool.file_info import basicConfig as basicConfig, verbose_import as verbose_import
from PyLib.tool.shell import runsh_safe as runsh_safe
from _typeshed import Incomplete
from pathlib import Path
from typing import Callable, Union

logger: Incomplete

def byte_to_megabyte(byte): ...

class ReportHook:
    start_time: Incomplete
    def __init__(self) -> None: ...
    def report(self, blocknum, block_size, total_size) -> None: ...

def download(url, download_file: Incomplete | None = ..., overwrite: bool = ...): ...
def check_entrez_email(email: Incomplete | None = ...) -> None: ...
def retries_download(fna_file: Path, call: Callable[[Path], Path], sequence_id: str, overwrite: bool = ..., retry: int = ...): ...

class RetriveUrl:
    @staticmethod
    def verify_format(sequence_id: str) -> bool: ...
    @classmethod
    def retrieve_url(cls, sequence_id: str): ...
    @classmethod
    def download_genome_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...
    @classmethod
    def download_genome(cls, sequence_id: str, output: Union[str, Path] = ..., overwrite: bool = ..., retry: int = ...): ...

class RefSeqURL(RetriveUrl):
    @staticmethod
    def verify_format(sequence_id): ...
    refseq_base_ftp_url: str
    refseq_genomes_url: str
    @classmethod
    def ls_url(cls, sequence_id: str, file_suffix: str = ...): ...
    @classmethod
    def download_genome_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...
    @classmethod
    def download_gff_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...
    @classmethod
    def download_gff(cls, sequence_id: str, output: Union[str, Path] = ..., overwrite: bool = ..., retry: int = ...): ...

class GWHSeqURL(RetriveUrl):
    @staticmethod
    def verify_format(sequence_id): ...
    @classmethod
    def download_genome_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...

class IMGSeqURL(RetriveUrl):
    @classmethod
    def img_login(cls, name: str = ..., passwd: str = ..., cookies: str = ..., overwrite: bool = ...): ...
    @classmethod
    def is_login(cls): ...
    @property
    def cookies(cls): ...
    @staticmethod
    def verify_format(sequence_id): ...
    @classmethod
    def download_genome_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...

class GenBankSeqURL(RetriveUrl):
    pattrens: Incomplete
    @classmethod
    def verify_format(cls, sequence_id): ...
    @classmethod
    def download_genome_to(cls, sequence_id: str, filename: Path, overwrite: bool = ...): ...

class WGSSeqURL(RefSeqURL):
    pattrens: Incomplete
    RETMAX: int
    @classmethod
    def verify_format(cls, sequence_id): ...
    @classmethod
    def query_assembly(cls, sequence_id) -> tuple['Entrez.Parser.DictionaryElement', list[str]]: ...

class NCBISerachURL(RefSeqURL):
    RETMAX: int
    @classmethod
    def verify_format(cls, sequence_id): ...

def download_genome(sequence_id: str, output: Union[str, Path] = ..., cookies: str = ..., overwrite: bool = ..., retry: int = ...): ...
download_fna = download_genome
