from _typeshed import Incomplete
from typing import Dict, List, Optional, Sequence, Set, Union

class KModule:
    additional_info: Incomplete
    def __init__(self, express: str = ..., additional_info: str = ...) -> None: ...
    def list_ko(self) -> List[str]: ...
    kos: Incomplete
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    @classmethod
    def from_list(cls, no_comma, is_chain: bool = ..., additional_info: str = ...): ...
    def all_paths(self, ko_match: Optional[Sequence] = ...) -> List[str]: ...
    def abundance(self, ko_match: Dict[str, Union[float, int]]): ...
    def completeness(self, ko_match: Union[List, Dict, Set]) -> float: ...

def init_module(module_str): ...
