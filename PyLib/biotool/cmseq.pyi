from Bio import SeqFeature as SeqFeature, SeqRecord as SeqRecord
from _typeshed import Incomplete
from typing import List, Tuple, Union

__date__: str
logger: Incomplete

class CMSEQ_DEFAULTS:
    minqual: int
    mincov: int
    minlen: int
    poly_error_rate: float
    poly_pvalue_threshold: float
    poly_dominant_frq_thrsh: float
    trimReads: Incomplete

class BamFile:
    bam_handle: Incomplete
    bamFile: Incomplete
    contigs: Incomplete
    def __init__(self, bamFile, sort: bool = ..., index: bool = ..., stepper: str = ..., minlen=..., filtRefGenomes: Union[str, List[str]] = ..., minimumReadsAligning: int = ...) -> None: ...
    def get_contigs(self): ...
    def get_contigs_obj(self): ...
    def get_contig_by_label(self, contigID): ...
    def parse_gff(self, inputGFF, inputGenome: str = ...): ...
    def parallel_reference_free_consensus(self, ncores: int = ..., **kwargs): ...

class BamContig:
    coverage: Incomplete
    consensus: str
    annotations: Incomplete
    bam_handle: Incomplete
    name: Incomplete
    length: Incomplete
    stepper: Incomplete
    def __init__(self, bamHandle, contigName, contigLength, stepper: str = ...) -> None: ...
    def set_stepper(self, ns) -> None: ...
    def majority_rule(data_array): ...
    def majority_rule_polymorphicLoci(data_array): ...
    def reference_free_consensus(self, consensus_rule=..., mincov=..., minqual=..., dominant_frq_thrsh=..., noneCharacter: str = ..., BAM_tagFilter: Incomplete | None = ..., trimReads: Incomplete | None = ...): ...
    def baseline_PSR(self, mincov: int = ..., minqual: int = ..., pvalue: float = ..., error_rate: float = ..., dominant_frq_thrsh: float = ..., binom: Incomplete | None = ...): ...
    def get_base_stats_for_poly(self, minqual=...) -> List[Tuple[Tuple[int, int, int, int], int]]: ...
    def easy_polymorphism_rate(self, mincov=..., minqual=..., dominant_frq_thrsh=...): ...
    def polymorphism_rate(self, mincov=..., minqual=..., pvalue=..., error_rate=..., dominant_frq_thrsh=...): ...
    def breadth_and_depth_of_coverage(self, mincov: int = ..., minqual: int = ..., trunc: int = ...): ...
    def depth_of_coverage(self, mincov: int = ..., minqual: int = ...): ...
    def breadth_of_coverage(self, mincov: int = ..., minqual: int = ...): ...
    def get_base_stats(self, min_read_depth=..., min_base_quality=..., error_rate=..., dominant_frq_thrsh=..., BAM_tagFilter: Incomplete | None = ..., trimReads: Incomplete | None = ...): ...
    def get_all_base_values(self, stats_value, *f_args, **f_kwargs): ...

def loc_gte(a, b): ...
def loc_lte(a, b): ...
def loc_gt(a, b): ...
def loc_lt(a, b): ...
def loc_leq(a, b): ...

class bcolors:
    HEADER: str
    OKBLUE: str
    OKGREEN: str
    WARNING: str
    FAIL: str
    ENDC: str
    OKGREEN2: str
    RED: str
    CYAN: str
