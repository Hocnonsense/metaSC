from Bio import Seq as Seq, SeqIO
from _typeshed import Incomplete
from typing import Generator

class KmerContig:
    kmer: Incomplete
    starts: Incomplete
    ends: Incomplete
    circle: Incomplete
    single: Incomplete
    def __init__(self, kmer) -> None: ...
    def is_end(self): ...
    def report_dict(self): ...

def get_kmer_str(seq: Seq.Seq): ...

class KmerAssembly:
    file: Incomplete
    k: Incomplete
    kmers: Incomplete
    isolate: Incomplete
    def __init__(self, file: str, k: int) -> None: ...
    def parse(self) -> Generator[SeqIO.SeqRecord, None, None]: ...
    def get_kmer(self) -> None: ...
    def filter_ends(self) -> None: ...
    def export(self, file: str = ...) -> None: ...
    def __getitem__(self, kmer: str): ...
