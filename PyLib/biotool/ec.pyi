from _typeshed import Incomplete
from enum import Enum
from typing import TextIO

def raw_read_dat(in_file: TextIO): ...
def check_title(texts: list[str]): ...
def check_entry_complete(texts: list[str]): ...
def parse_entry_dict(texts: list[str]): ...
def parse_id(clean_text: str): ...
def bind_text(text1: str, text2: str): ...
def parse_sentence(clean_texts: list[str]): ...
def parse_ca(clean_texts: list[str]): ...
def parse_comments(clean_texts: list[str]): ...
def parse_db_reference(clean_texts: list[str]): ...

class EnzymeClassState(Enum):
    valid: str
    deleted: str
    renumbered: str
    @classmethod
    def check_state(cls, DE: str): ...

def extract_transferred_entries(entries: str): ...

class EnzymeClassEntry:
    ID: Incomplete
    DE: Incomplete
    AN: Incomplete
    CA: Incomplete
    CC: Incomplete
    PR: Incomplete
    DR: Incomplete
    state: Incomplete
    transfered: Incomplete
    def __init__(self, ID: str, DE: str, AN: list[str] = ..., CA: list[str] = ..., CC: list[str] = ..., PR: dict[str, str] = ..., DR: dict[str, str] = ...) -> None: ...
    @classmethod
    def read_texts(cls, texts: list[str]) -> EnzymeClassEntry: ...

class EnzymeClassDatabase:
    dat: Incomplete
    title: Incomplete
    ecs: Incomplete
    def __init__(self, dat: str, strict: bool = ...) -> None: ...
    def read_dat(self, strict: bool = ...): ...
    def __contains__(self, key: str): ...
    def __getitem__(self, key: str) -> list[EnzymeClassEntry]: ...
